o<_probe_tool> sub

; Save and autorestore model states
M73

; Paramaters for this macro
#<search_distance> = #1

; Determine the Search Direction
O1 if [#<search_distance> GE 0]
    ; Searching in the positive direction
    #<search_direction> = 1
O1 else
    ; Searching in the negative direction
    #<search_direction> = -1
O1 endif


O3 if [#<_hal[probe.ps_searchvel]> LE 0]
    O3 return [-97] ; indicate searchvel <= 0
O3 endif

O4 if [#<_hal[probe.ps_probevel]> LE 0]
    O4 return [-96] ; indicate probevel <= 0
O4 endif

; Set incremental mode
G91

; Set Search Feed Rate
F[#<_hal[probe.ps_searchvel]>]

; Force LinuxCNC to refresh hal pin states prior to reading HAL pin
M66 E0 L0

; Check if probe is already tripped
O10 if [#<_hal[motion.probe-input]> EQ 1]
    O10 return [-1]
O10 endif


; Perform the Search
G38.3 Z[#<search_distance>]

; Check to see if we failed to make contact
O12 if [#5070 EQ 0]
    O12 return [-2]
O12 endif

; Move away
F[#<_ini[TOOLSENSOR]RAPID_SPEED>]
G1 Z[-#<_hal[probe.ps_probe_latch]>*#<search_direction>]

;Check for refinement measurement
O7 if [#<_hal[probe.chk_use_fine]> GT 0]

    ; Allow a half second for the probe input to clear
    G4 P0.5      
    ; Set Probe Feed Rate
    F[#<_hal[probe.ps_probevel]>]

    ; Force LinuxCNC to refresh hal pin states prior to reading HAL pin
    M66 E0 L0

    ; Check if probe is already tripped
    O21 if [#<_hal[motion.probe-input]> EQ 1]
        O21 return [-1]
    O21 endif

    ; Perform the Probe
    G38.3 Z[#<_hal[probe.ps_probe_latch]>*2*#<search_direction>]
        
    ; Check to see if we failed to make contact
    O25 if [#5070 EQ 0]
        O25 return [-2]
    O25 endif
        
    ; Move away 
    F[#<_ini[TOOLSENSOR]RAPID_SPEED>]
    G1 Z[-#<_hal[probe.ps_probe_latch]>*#<search_direction>]

O7 endif
    
o<_probe_tool> endsub [0]
M2
